#!/usr/bin/env bash

#===============================================================================
# ENV
#===============================================================================
SHELL_NAME=${1:-"zsh"}

export EDITOR="hx"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export PAGER="less -imMWR"
export VISUAL="zed"

export XDG_STATE_HOME=$HOME/.local/state
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CACHE_HOME=$HOME/.cache
export XDG_CONFIG_HOME=$HOME/.config
export ICLOUD="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Documents"

export SRC="$HOME/Source"
export GITHUB="$SRC/github.com"
export GITCJ="$SRC/gitlab.cj.dev"
export JEFF="$SRC/github.com/jeffwindsor"
export DOTFILES="$JEFF/dotfiles"
export NIXOS_CONFIG="$JEFF/nixos-config"
export NIX_DARWIN_CONFIG="$JEFF/nix-darwin-config"

#===============================================================================
# Jump Directories
#===============================================================================
alias .....="cd ../../../../"
alias ....="cd ../../../"
alias ...="cd ../../"
alias ..="cd .."
alias icloud="cd $ICLOUD"

# Jump Directories
function alias_jump() {
	alias "${1}"="cd $2"
	alias "${1}h"="\$EDITOR $2"
	alias "${1}z"="\$VISUAL $2"
	# if it is a git repo, add direct access via lazygit
	if [ -d "${2}/.git" ]; then
		alias "${1}g"="lazygit --path $2"
	fi
}

alias_jump "config" "$XDG_CONFIG_HOME"
alias_jump "hub" "$GITHUB"
alias_jump "lab" "$GITCJ"
alias_jump "empire" "$GITCJ"
alias_jump "jeff" "$JEFF"
alias_jump "src" "$SRC"
alias_jump "d" "$DOTFILES"
alias "ds"="\$EDITOR \$DOTFILES/.shellrc"
alias_jump "dw" "$NIX_DARWIN_CONFIG"
alias_jump "nixos" "$NIXOS_CONFIG"

#===============================================================================
# Package Managers
#===============================================================================
#== Homebrew: https://brew.sh/ ==
if command -v brew &>/dev/null; then
	# only auto-updates db every 12+ hours
	export HOMEBREW_AUTO_UPDATE_SECS=43200
	# initialize
	eval "$($(which brew) shellenv)"

	function brew-list-all() {
		echo '== Formula Leaves =='
		brew leaves
		echo
		echo '== Casks =='
		# -1 is to 'Force output to be one entry per line'
		brew list -1 --casks
	}
	alias bi="brew info"
	alias bl="brew-list-all"
	alias blc="brew list --casks --versions"
	alias blf="brew list --formula --versions"
	alias bs="brew search"
	alias bsd="brew search --desc"
fi

#== Nix https://nixos.org/ ==
if command -v nix &>/dev/null; then
	function nix-package-install-to-profile() {
		nix profile install nixpkgs#"${1}"
	}
	# create a blank shell.nix in currenct folder
	function nix-shell-init() {
		cat <<EOF >shell.nix
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
	
    # name (default: nix-shell). Set the name of the derivation.
	# name = "";
  	
    # packages (default: []). Add executable packages to the nix-shell environment.
	packages = with pkgs; [
	];

    # inputsFrom (default: []). Add build dependencies of the listed derivations to the nix-shell environment.
	# inputsFrom = [ pkgs.hello ];

    # shellHook (default: ""). Bash statements that are executed by nix-shell.
  	shellHook = ''
    	echo -e "\e[1;33mDevelopment Environment\e[0;32m"
    	# add --version or some other call to list dev packages
		echo -e "\e[0m"
  	'';
}
EOF
	}

	alias nl="nix-store -q --references /run/current-system/sw | sd '/nix/store/.+?-' '' | sort" # list system packages
	alias npip="nix-package-install-to-profile"
	alias nps="nix search nixpkgs"
	alias ns="nix-shell"
	alias nsi="nix-shell-init"

	if [ -d "/etc/nixos" ]; then
		#nixos
		alias clean="nix-env --delete-generations +5 && nix-collect-garbage"
		alias list_gens="sudo nix-env --list-generations --profile /nix/var/nix/profiles/system"
		alias optimize="nix optimise-store"
		alias rebuild="sudo nixos-rebuild switch"
		alias upgrade="sudo nixos-rebuild switch --upgrade"

	elif command -v darwin-rebuild &>/dev/null; then
		# nix-darwin (macos) with flakes
		export NIX_FLAKE="$NIX_DARWIN_CONFIG/$(hostname -s)"
		alias clean="sudo nix-collect-garbage --delete-generations +5"
		alias list_gens="darwin-rebuild --list-generations"
		alias rebuild="darwin-rebuild switch --flake \$NIX_FLAKE"
		alias rebuild_from_scratch="nix run nix-darwin --extra-experimental-features \"nix-command flakes\"  -- switch --flake \$NIX_DARWIN_CONFIG/\$(hostname -s)"
		alias update="nix flake update --flake \$NIX_FLAKE"
	fi
fi

#===============================================================================
# Editors
#===============================================================================
#== Helix: https://github.com/helix-editor/helix
if command -v hx &>/dev/null; then
	alias h="hx"
	alias h.="hx ."
fi

#== Zed: https://zed.dev/docs/
if command -v zed &>/dev/null; then
	alias z="zed"
	alias z.="zed ."
fi

#===============================================================================
# Terminal
#===============================================================================
#== cat replacement (rust): https://github.com/sharkdp/bat
if command -v bat &>/dev/null; then
	alias cat="bat --style=plain"
fi

#== environment management: https://github.com/direnv/direnv
if command -v direnv &>/dev/null; then
	eval "$(direnv hook $SHELL_NAME)"
fi

#== containers
if command -v docker &>/dev/null; then
	alias dcl='docker container ls --all'
	alias dil='docker image ls'
	alias dila='docker image ls --all'
	alias dir='docker image rm -f'
	alias dr='docker run -it '
	alias drs="docker_run_on_git_repo \$SRC"
fi

#== ls replacement (rust): https://github.com/eza-community/eza
if command -v eza &>/dev/null; then
	alias la="eza -F --group-directories-first --git --all --no-user"
	alias ll="eza -lF --group-directories-first --no-user"
	alias lla="eza -lF --group-directories-first --git --all --no-user"
	alias l="clear && lla"
	alias tree="eza --tree --git --follow-symlinks"
	alias treea="eza --tree --git --all --follow-symlinks"
	alias treed="eza --tree --git --level --follow-symlinks"
else
	# default to using ls if not present (to keep the muscle memory)
	alias l="ls --color=auto"
	alias la="ls -a --color=auto"
	alias ll="ls -l --color=auto"
	alias lla="ls -la --color=auto"
fi

#== bling: https://github.com/fastfetch-cli/fastfetch
if command -v fastfetch &>/dev/null; then
	alias ff="fastfetch"
fi

#== fuzzy finder: https://github.com/junegunn/fzf
if command -v fzf &>/dev/null; then
	export FZF_DEFAULT_COMMAND='find . -type f -name ".*" -o -type f'
	export FZF_DEFAULT_OPTS='--info=inline --reverse --border none --preview "bat {}" --preview-window down'
	eval "$(fzf --$SHELL_NAME)"
fi

#==Git (Source Control): https://github.com/git/git
if command -v git &>/dev/null; then

	export GIT_LOG_PRETTY_FORMAT='%C(green)%h%C(reset) - %s%C(cyan) | %an%C(dim) | %ch%C(auto)%d%C(reset)'

	# pull personal repositories that I want up to date
	function dpl() {
		# -C specifies location for git to act on, allows running of this command from anywhere
		git -C "$DOTFILES" pull -v
		git -C "$NIXOS_CONFIG" pull -v
		git -C "$NIX_DARWIN_CONFIG" pull -v
		# git -C "$GNOME_CONFIG" pull -v
		# git -C "$JEFF/ascii-art" pull -v
	}

	# Function to find all directories containing a .git subdirectory
	find_all_git_repos() {
		find "$1" -type d -name ".git" -prune -print0 | xargs -0 -I{} dirname "{}"
	}

	# Function to execute a git command on each Git repository
	#   optional sleep time as second parameter
	git_exec_on() {
		while IFS= read -r repo; do
			echo "==> $repo"
			git -C "$repo" "$@"
		done
	}

	git_all() {
		find_all_git_repos "$SRC" | git_exec_on "$@"
	}
	alias ga="git_all"
	alias gclean="git clean -xdf"
	alias gls="git ls-tree --full-tree --name-only -r HEAD."
	alias gs="git status"
	alias gss="git_all status -s"
	alias gpl="git pull"
	# git blame (more precise)
	alias gb="git blame -w -C -C -C"
	# git blame line range
	alias gbl="git blame -w -C -C -C -L"
	# git diff by words changed
	alias gdw="git diff --word-diff"
	alias gm="git maintenance start"

	# git clone from git hub to my source directory
	function ghub() { git clone git@github.com:"$1" "$SRC"/github.com/"$1"; }
	# git clone from git hub to my source directory
	function glab() { git clone git@gitlab.cj.dev:"$1" "$SRC"/gitlab.cj.dev/"$1"; }

	#==Lazygit (Git TUI): https://github.com/jesseduffield/lazygit ==
	if command -v lazygit &>/dev/null; then
		alias gg="lazygit"
		alias lg="lazygit"
	fi
fi

#== GREP replacement: https://github.com/BurntSushi/ripgrep
if command -v rg &>/dev/null; then
	export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/ripgreprc"
	alias grep="rg"
	alias ar="alias | rg"
	alias er="env | rg"
	alias fr="declare -f | rg"

fi

alias ssh="TERM=xterm-256color ssh"

#== Prompt : https://github.com/starship/starship
if command -v starship &>/dev/null; then
	eval "$(starship init $SHELL_NAME)"
fi

#== dotfiles:
if command -v stow &>/dev/null; then

	# cleans old links, and puts new links from a stow location ($1) to a root ($2)
	function stow-location-sync() {
		source=$1
		target=$2

		[ -d "$target" ] || mkdir -p "$target"
		echo "Clean and Restore $1 into $target (with stow)"
		# clean old links
		stow -D . --dir="$source" --target="$target"
		# link to source (no-folding forces links at folder level)
		stow . --dir="$source" --target="$target"
	}

	# sync all dotfile repos to appropriate home locations
	alias dsync="stow-location-sync $DOTFILES $HOME"
fi

#== terminal multiplexer : https://github.com/tmux/tmux
if command -v tmux &>/dev/null; then
	alias t="tmux"
	alias tl="tmux ls"         # list
	alias ta="tmux attach"     # attach all sessions or number
	alias tan="tmux attach -t" # attach to named
	alias tn="tmux new -s"     # new with name
	alias tk="tmux kill-session"
	alias tkn="tmux kill-session -t"
fi

#== fuzzy finder tui
if command -v tv &>/dev/null; then
	alias src="cd \$(tv git-repos)"
	alias srch="\$EDITOR \$(tv git-repos)"
	alias srcz="\$VISUAL \$(tv git-repos)"
	# -i auto fills search
	alias art="tv alias -i"
	alias ert="tv env -i"
fi

#== tui file manager: https://github.com/sxyazi/yazi
if command -v yazi &>/dev/null; then
	# open yazi and shell change to the selected directory on exit
	function yazi-change-dir() {
		local tmp
		tmp="$(mktemp -t "yazi-cwd.XXXXX")"
		yazi "$@" --cwd-file="$tmp"
		if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
			cd -- "$cwd" || return
		fi
		rm -f -- "$tmp"
	}

	alias y="yazi"
	alias yy="yazi-change-dir"

fi

#== xsh packager manager
if command -v zinit &>/dev/null; then
	alias zclean="zinit delete --clean"
	alias zup="zinit update --all"
	alias zsync="zclean && zup"
fi

# source machine specific aliases
if test -f "$HOME/.shellrc.local"; then
	source "$HOME/.shellrc.local"
fi
