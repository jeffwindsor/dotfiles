#!/usr/bin/env bash

#===============================================================================
# ENV
#===============================================================================
SHELL_NAME=${1:-"zsh"}

export EDITOR="hx"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export PAGER="less -imMWR"
export VISUAL="zed"

export XDG_STATE_HOME=$HOME/.local/state
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CACHE_HOME=$HOME/.local/cache
export XDG_CONFIG_HOME=$HOME/.config

export ICLOUD="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Documents"
export SOURCE="$HOME/Source"
export SOURCE_GITHUB="$SOURCE/github.com"
export SOURCE_GITCJ="$SOURCE/gitlab.cj.dev"
export SOURCE_JEFF="$SOURCE/github.com/jeffwindsor"

export DOTFILES="$SOURCE_JEFF/dotfiles"
export NIXOS_CONFIG="$SOURCE_JEFF/nixos-config"
export NIX_DARWIN_CONFIG="$SOURCE_JEFF/nix-darwin-config"
export NIX_SHELLS="$SOURCE_JEFF/nix-shells"
export REPOS_TO_SYNC=("$DOTFILES" "$NIXOS_CONFIG" "$NIX_DARWIN_CONFIG" "$NIX_SHELLS")

#===============================================================================
# Jump Directories
#===============================================================================
alias .....="cd ../../../../"
alias ....="cd ../../../"
alias ...="cd ../../"
alias ..="cd .."
alias icloud="cd $ICLOUD && l"
alias c="clear"

function alias-dir() {
	# create aliases for cd, edit, visual-edit and lazygit (if contains .git)
	#
	alias "${1}"="cd $2 && l"
	alias "${1}e"="\$EDITOR $2"
	alias "${1}v"="\$VISUAL $2"

	# lazygit only if repo
	if [ -d "${2}/.git" ]; then
		alias "${1}g"="lazygit --path $2"
	fi
}
alias-dir "config" "$XDG_CONFIG_HOME"
alias-dir "hub" "$SOURCE_GITHUB"
alias-dir "lab" "$SOURCE_GITCJ"
alias-dir "empire" "$SOURCE_GITCJ/empire"
alias-dir "jeff" "$SOURCE_JEFF"
alias-dir "src" "\$(git-find-all-repos|fzf-display-basenames)"

alias-dir "d" "$DOTFILES" && alias "ds"="\$EDITOR \$DOTFILES/.shellrc"
alias-dir "dw" "$NIX_DARWIN_CONFIG"
alias-dir "nixos" "$NIXOS_CONFIG"
alias-dir "nss" "$NIX_SHELLS"

function array-to-string() {
	IFS=$'\n' # Use newline as delimiter
	local array_string
	array_string="${@[*]}"
	echo "$array_string"
}
#===============================================================================
# Package Managers
#===============================================================================
#== Homebrew: https://brew.sh/ ==
if command -v brew &>/dev/null; then
	# only auto-updates db every 12+ hours
	export HOMEBREW_AUTO_UPDATE_SECS=43200
	# initialize
	eval "$($(which brew) shellenv)"

	function brew-list-all() {
		echo '== Formula Leaves =='
		brew leaves
		echo
		echo '== Casks =='
		# -1 is to 'Force output to be one entry per line'
		brew list -1 --casks
	}
	alias bi="brew info"
	alias bl="brew-list-all"
	alias blc="brew list --casks --versions"
	alias blf="brew list --formula --versions"
	alias bs="brew search"
	alias bsd="brew search --desc"
fi

#== Nix https://nixos.org/ ==
if command -v nix &>/dev/null; then

	function nix-package-install-to-profile() {
		nix profile install nixpkgs#"${1}"
	}

	function nix-shell-from-file() {
		local selection
		selection=$(fd -tf . "$NIX_SHELLS" | fzf-display-basenames)

		[[ -n $selection ]] && nix-shell $selection

	}

	# create a blank shell.nix in currenct folder
	function nix-shell-init() {
		cat <<EOF >shell.nix
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
	
  # name (default: nix-shell). Set the name of the derivation.
  # name = "";
  	
  # packages (default: []). Add executable packages to the nix-shell environment.
  packages = with pkgs; [];

  # inputsFrom (default: []). Add build dependencies of the listed derivations to the nix-shell environment.
  # inputsFrom = [ pkgs.hello ];

  # shellHook (default: ""). Bash statements that are executed by nix-shell.
  shellHook = ''
    echo -e "\e[1;33mDevelopment Environment\e[0;32m"
    # add --version or some other call to list dev packages
	echo -e "\e[0m"
  '';
}
EOF
	}

	alias nl="nix-store -q --references /run/current-system/sw | sd '/nix/store/.+?-' '' | sort" # list system packages
	alias nps="nix search nixpkgs"
	alias ns="nix-shell"
	alias nsf="nix-shell-from-file"
	alias optimise="nix optimise-store"

	if [ -d "/etc/nixos" ]; then
		#nixos
		alias clean="nix-env --delete-generations +5 && nix-collect-garbage"
		alias list_gens="sudo nix-env --list-generations --profile /nix/var/nix/profiles/system"
		alias rebuild="sudo nixos-rebuild switch"
		alias upgrade="sudo nixos-rebuild switch --upgrade"

	elif command -v darwin-rebuild &>/dev/null; then
		# nix-darwin using flakes
		export NIX_FLAKE="$NIX_DARWIN_CONFIG/$(hostname -s)"
		alias clean="sudo nix-collect-garbage --delete-generations +5"
		alias list_gens="darwin-rebuild --list-generations"
		alias rebuild="darwin-rebuild switch --flake \$NIX_FLAKE"
		alias rebuild_from_scratch="nix run nix-darwin --extra-experimental-features \"nix-command flakes\"  -- switch --flake \$NIX_DARWIN_CONFIG/\$(hostname -s)"
		alias update="nix flake update --flake \$NIX_FLAKE"
	fi
fi

#===============================================================================
# Editors
#===============================================================================
#== Helix: https://github.com/helix-editor/helix
if command -v hx &>/dev/null; then
	alias h="hx"
	alias h.="hx ."
fi

#== Zed: https://zed.dev/docs/
if command -v zed &>/dev/null; then
	alias z="zed"
	alias z.="zed ."
fi

#===============================================================================
# Terminal
#===============================================================================
#== cat replacement (rust): https://github.com/sharkdp/bat
if command -v bat &>/dev/null; then
	alias cat="bat --style=plain"
fi

#== diff
# side by side, color, minimal output
alias diffs="diff -dbBy --suppress-common-lines --color=always"


#== environment management: https://github.com/direnv/direnv
if command -v direnv &>/dev/null; then
	eval "$(direnv hook $SHELL_NAME)"
fi

#== containers
if command -v docker &>/dev/null; then
	alias dcl='docker container ls --all'
	alias dil='docker image ls'
	alias dila='docker image ls --all'
	alias dir='docker image rm -f'
	alias dr='docker run -it '
fi

#== ls replacement (rust): https://github.com/eza-community/eza
if command -v eza &>/dev/null; then
	alias l="clear && eza -lF --header --group-directories-first --git --all --no-user --no-permissions"
	alias la="eza -F --group-directories-first --git --all --no-user --no-permissions"
	alias ll="eza -lF --group-directories-first --git --no-user --no-permissions"
	alias lla="eza -lF --group-directories-first --git --all --no-user --no-permissions"

	alias tree="eza --tree --git --follow-symlinks"
	alias treea="eza --tree --git --all --follow-symlinks"
else
	# default to using ls
	alias l="clear && ls -la --color=auto"
	alias la="ls -a --color=auto"
	alias ll="ls -l --color=auto"
	alias lla="ls -la --color=auto"
fi

#== bling: https://github.com/fastfetch-cli/fastfetch
if command -v fastfetch &>/dev/null; then
	alias ff="fastfetch"
fi

#== fuzzy finder: https://github.com/junegunn/fzf
if command -v fzf &>/dev/null; then
	export FZF_DEFAULT_COMMAND='fd -H -t f'
	export FZF_DEFAULT_OPTS='--info=inline --reverse --border none --preview "bat {}" --preview-window down'

	# shows the basename in the selection window, but returns full path
	function fzf-display-basenames() {
		fzf --delimiter / --with-nth -1
	}

	# select functions that feed to an eval statement
	# TODO consolidate functions???
	# 
	function fzf-select-eval(){
		local exec_command="${@}"
	
		local one="$(fd -H -t d | fzf)"

		[ -d $one ] || eval "$exec_command $one"
	}

	function fzf-select-dir-eval(){
		local exec_command="${@}"
	
		local one="$(fzf)"

		[ -d $one ] || eval "$exec_command $one"
	}

	function fzf-select2-eval(){
		local exec_command="${@}"
	
		local one="$(fzf)"
		local two="$(fzf)"

		[ -d $one ] || [ -d $two ] || eval "$exec_command $one $two"
	}

	# fzf double select files then show diff
	alias fdiff="fzf-select2-eval diffs"

	# straight function alias
	alias fdir="fzf-select-dir-eval"
	alias ffile="fzf-select-eval"
	alias ffiles="fzf-select2-eval"

	# initialize
	eval "$(fzf --$SHELL_NAME)"
fi

#==Git (Source Control): https://github.com/git/git
if command -v git &>/dev/null; then

	# 80adbf1 - Add dotfiles | Windsor, Jeff | 3 hours ago (HEAD -> main, origin/main)
	export GIT_LOG_PRETTY_FORMAT='%C(green)%h%C(reset) - %s%C(cyan) | %an%C(dim) | %ch%C(auto)%d%C(reset)'

	# Function to find all directories containing a .git subdirectory
	git-find-all-repos() {
		# default to my source directory
		local root=${1:-$SOURCE}
		# prune will stop recurse on match, sed removes the '/.git' from the end of the result
		find "$root" -name .git -type d -prune | sed 's|/.git$||'
	}

	# Function to execute a git command on each Git repository
	git-exec-on() {
		local repo
		while IFS= read -r repo; do
			echo "==> $repo"
			git -C "$repo" "$@"
		done
	}

	# sync all listed git repos. escaping REPOS_TO_SYNC so it will run with run time value
	alias gsync="array-to-string \$REPOS_TO_SYNC | git-exec-on pull -v"
	alias gar="git-find-all-repos"
	alias garx="git-find-all-repos | git-exec-on"
	alias gars="git-find-all-repos | git-exec-on status -s"
	# git blame (more precise)
	alias gb="git blame -w -C -C -C"
	# git blame line range
	alias gbl="git blame -w -C -C -C -L"
	# alias gclean="git clean -xdf"
	# git diff by words changed
	alias gdw="git diff --word-diff"
	# logs with personal pretty format, escaped $ so any change to env-var would be reflected in next run
	alias gl="git log --format=\$GIT_LOG_PRETTY_FORMAT"
	# alias gm="git maintenance start"
	alias gs="git status"
	# shows terse status for all repositories
	alias gpl="git pull"

	# git clone from git hub to my source directory
	function ghub() { git clone git@github.com:"$1" "$SOURCE"/github.com/"$1"; }
	# git clone from git hub to my source directory
	function glab() { git clone git@gitlab.cj.dev:"$1" "$SOURCE"/gitlab.cj.dev/"$1"; }

	#==Lazygit (Git TUI): https://github.com/jesseduffield/lazygit ==
	if command -v lazygit &>/dev/null; then
		alias gg="lazygit"
		alias ggs="lazygit --path \$( git-find-all-repos | fzf-display-basenames )"
		alias lg="lazygit"
	fi
fi

#== GREP replacement: https://github.com/BurntSushi/ripgrep
if command -v rg &>/dev/null; then
	export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/ripgreprc"
	# aliases
	alias ar="alias | rg"
	# environment
	alias er="env | rg"
	# functions
	alias fr="declare -f | rg"
fi

alias ssh="TERM=xterm-256color ssh"

#== Prompt : https://github.com/starship/starship
if command -v starship &>/dev/null; then
	eval "$(starship init $SHELL_NAME)"
fi

#== dotfiles:
if command -v stow &>/dev/null; then

	# cleans old links, and puts new links from a stow location ($1) to a root ($2)
	function stow-location-sync() {
		source=$1
		target=$2

		[ -d "$target" ] || mkdir -p "$target"
		echo "Clean and Restore $1 into $target (with stow)"
		# clean old links
		stow -D . --dir="$source" --target="$target"
		# link to source (no-folding forces links at folder level)
		stow . --dir="$source" --target="$target"
	}

	# sync all dotfile repos to appropriate home locations
	alias dsync="stow-location-sync $DOTFILES $HOME"
fi

#== terminal multiplexer : https://github.com/tmux/tmux
if command -v tmux &>/dev/null; then
	alias t="tmux"
	alias tl="tmux ls"         # list
	alias ta="tmux attach"     # attach all sessions or number
	alias tan="tmux attach -t" # attach to named
	alias tn="tmux new -s"     # new with name
	alias tk="tmux kill-session"
	alias tkn="tmux kill-session -t"
fi


#== tui file manager: https://github.com/sxyazi/yazi
if command -v yazi &>/dev/null; then
	# open yazi and shell change to the selected directory on exit
	function yazi-change-dir() {
		local tmp
		tmp="$(mktemp -t "yazi-cwd.XXXXX")"
		yazi "$@" --cwd-file="$tmp"
		if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
			cd -- "$cwd" || return
		fi
		rm -f -- "$tmp"
	}

	alias y="yazi"
	alias yy="yazi-change-dir"

fi

#== xsh packager manager
if command -v zinit &>/dev/null; then
	alias zclean="zinit delete --clean"
	alias zup="zinit update --all"
	alias zsync="zclean && zup"
fi

# source machine specific aliases
if test -f "$HOME/.shellrc.local"; then
	source "$HOME/.shellrc.local"
fi
