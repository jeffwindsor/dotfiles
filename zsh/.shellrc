#!/usr/bin/env bash

export FG_BLACK='\e[01;30m'
export FG_BLUE='\e[01;34m'
export FG_CYAN='\e[01;36m'
export FG_GRAY='\e[01;90m'
export FG_GREEN='\e[01;32m'
export FG_LIGHTBLUE='\e[01;94m'
export FG_LIGHTCYAN='\e[01;96m'
export FG_LIGHTGRAY='\e[01;37m'
export FG_LIGHTGREEN='\e[01;92m'
export FG_LIGHTMAGENTA='\e[01;95m'
export FG_LIGHTRED='\e[01;91m'
export FG_LIGHTYELLOW='\e[01;93m'
export FG_MAGENTA='\e[01;35m'
export FG_RED='\e[01;31m'
export FG_WHITE='\e[01;97m'
export FG_YELLOW='\e[01;33m'

export BG_BLACK='\e[01;40m'
export BG_BLUE='\e[01;44m'
export BG_CYAN='\e[01;46m'
export BG_GRAY='\e[01;100m'
export BG_GREEN='\e[01;42m'
export BG_LIGHTBLUE='\e[01;104m'
export BG_LIGHTCYAN='\e[01;106m'
export BG_LIGHTGRAY='\e[01;47m'
export BG_LIGHTGREEN='\e[01;102m'
export BG_LIGHTMAGENTA='\e[01;105m'
export BG_LIGHTRED='\e[01;101m'
export BG_LIGHTYELLOW='\e[01;103m'
export BG_MAGENTA='\e[01;45m'
export BG_RED='\e[01;41m'
export BG_WHITE='\e[01;107m'
export BG_YELLOW='\e[01;43m'

export NC='\e[0m'

# SHELL CONFIGURATION:
# 	- shared among multiple shells
# 	- represents my personal/opinionated approach to using the terminal
# 	- Contains:
# 		- Enviroment Variables
# 		- Jump to Directories
# 		- Usage Aliases (added based on if app is installed)

export SHELL_NAME=${1:-"zsh"}

export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"
export PAGER="less -imMWR"

export EDITOR="hx"
export VISUAL="zed"

export XDG_STATE_HOME=$HOME/.local/state
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CACHE_HOME=$HOME/.local/cache
export XDG_CONFIG_HOME=$HOME/.config

export ICLOUD="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Documents"

export SOURCE="$HOME/Source"
export SOURCE_GITHUB="$SOURCE/github.com"
export SOURCE_GITCJ="$SOURCE/gitlab.cj.dev"
export SOURCE_JEFF="$SOURCE/github.com/jeffwindsor"
export DOTFILES="$SOURCE_JEFF/dotfiles"
export DOCKER_FILES="$SOURCE_JEFF/docker-images"
export NIXCONFIG="$SOURCE_JEFF/nix-config"
export NIXSHELLS="$NIXCONFIG/shells" # no longer a separate repo
export REPOS_TO_SYNC=("$DOTFILES")

#== Jump to Directories (prefer this over zoxide)
alias la="ls -a --color=auto"
alias ll="ls -l --color=auto"
alias lla="ls -la --color=auto"
alias l="clear && lla"

alias .....="cd ../../../../"
alias ....="cd ../../../"
alias ...="cd ../../"
alias ..="cd .."
alias icloud="cd $ICLOUD && l"
alias c="clear"
# clear and return to HOME
alias cc="cd && clear"
alias config="cd $XDG_CONFIG_HOME && l"
alias hub="cd $SOURCE_GITHUB && l"
alias lab="cd $SOURCE_GITCJ && l"
alias empire="cd $SOURCE_GITCJ/empire && l"
alias jeff="cd $SOURCE_JEFF && l"
# helps remote servers when using advanced terminals like ghostty and alacritty
alias ssh="term=xterm-256color ssh"

# create aliases for cd, edit, visual-edit and lazygit (if contains .git)
function alias-dir() {
	alias "${1}"="cd $2 && l"
	alias "${1}e"="\$EDITOR $2"
	alias "${1}v"="\$VISUAL $2"

	# lazygit only if repo
	if [ -d "${2}/.git" ]; then
		alias "${1}g"="lazygit --path $2"
	fi
}
alias-dir "d" "$DOTFILES"

# source shellrc
alias ss="source \$HOME/.shellrc"
# edit shellrc, shared aliases and functions
alias ds="\$EDITOR \$HOME/.config/shellrc/"

# function not needed outside this script
unset -f alias-dir

#== ASDF  https://asdf-vm.com/
alias async="asdf_sync"
alias al="asdf latest --all"
alias apa="asdf plugin list all | fzf  --header 'asdf plugin add' --preview '' --with-nth {1} | xargs asdf plugin add"
alias apr="asdf plugin list | fzf --header 'asdf plugin  remove' --preview '' | xargs plugin remove"
alias apl="asdf plugin list"
alias apu="asdf plugin update --all"
alias avi="asdf_version_install"

function asdf_version_install() {
	local name
	if [[ $# -eq 0 ]]; then
		name=$(asdf plugin list | fzf)
	else
		name=$1
	fi
	asdf install "$name" $({
		comm -23 \
			<(asdf list all "$name" | sort --version-sort) \
			<(asdf list "$name" | awk '{print $1}' | sort --version-sort)
		echo "latest"
	} | fzf --header="$name")
}

function asdf_add() {
	echo -e "${FG_LIGHTBLUE} ==> adding $1 version $2 ${NC}"
	asdf plugin add "$1"
	asdf install "$1" "$2"
	asdf set "$1" "$2"
}

function asdf_sync() {
	# do this in home directory so .tool_version is used globally
	cd

	machine=$(networksetup -getcomputername)
	echo "${BG_LIGHTBLUE}${FG_BLACK} == asdf sync on $machine == ${NC}"
	echo -e "${FG_YELLOW} warning: validate this exists or add it ${NC}"
	echo -e "${FG_GRAY} export PATH='\${ASDF_DATA_DIR:-\$HOME/.asdf}/shims:\$PATH' >> .shellrc.local ${NC}"

	# all machines - nothing yet

	# if [[ $machine == "Midnight Air" ]]; then
	# nothing yet
	# fi

	if [[ $machine == "WKMZTAFD6544" ]]; then
		asdf_add java corretto-21.0.7.6.1
		asdf_add maven 3.9.9
		asdf_add scala 2.12.18
		asdf_add nodejs 20.19.1
		asdf_add awscli 2.27.0
	fi

	cd - || return
}

#== cat replacement (rust): https://github.com/sharkdp/bat
alias cat="bat" # --style=plain"

#== Homebrew https://brew.sh/

# Init
[[ -f "/opt/homebrew/bin/brew" ]] && eval "$(/opt/homebrew/bin/brew shellenv)"

# brew zsh completions
FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

# Synchronize brews with dot file scripts
function bsync() {
	brew_sync "$@"
	brew upgrade -q
	if command -v asdf &>/dev/null; then
		asdf_sync
	fi
}

alias db="\$EDITOR \$DOTFILES/brews.sh"

# list all installed brews, opting to only show top level formulae
alias bl="echo '== Formulae ==' && brew leaves && echo '== Casks ==' && brew list --casks"

alias bn="brew install"
alias bi="brew info"
alias bs="brew search"
alias bup="brew upgrade"

function brew_sync() {

	FORMULAE=(
		asdf
		bash # macos has OLD version, replace
		bat
		eza
		fd
		fzf
		git
		helix
		lazygit
		ripgrep
		sd
		starship
		stow
		# television
		yazi # terminalfile manager
		zsh  # macos has OLD version, replace

		nushell  # modern shell
		carapace # completion library

		bash-language-server
		shfmt
		shellcheck

		# exercism
		# gleam
	)

	CASK=(
		firefox
		ghostty
		google-chrome
		jordanbaird-ice # bar icon manager
		keepingyouawake
		nikitabobko/tap/aerospace #i3 like tiling
		zed
		zen-browser

		claude
	)

	# add machine specific packages
	machine=$(networksetup -getcomputername)
	echo -e "${BG_LIGHTBLUE}${FG_BLACK} == brew sync on $machine == ${NC}"

	if [[ $machine == "Midnight Air" ]]; then
		CASK=(
			"${CASK[@]}"
			balenaetcher # usb iso app
			chatgpt
			discord
			iina
			spotify
			transmission
		)
	fi

	if [[ $machine == "WKMZTAFD6544" ]]; then
		FORMULAE=(
			"${FORMULAE[@]}"
			aws-cdk
			colima
			docker
			docker-buildx
			lazydocker
			maven
			visual-studio-code
		)
		CASK=(
			"${CASK[@]}"
			intellij-idea
			slack
			tuple
		)

	fi

	FORMULAE_INSTALLED=("$(brew leaves | col)") # leaves only shows top level packages, list shows all installed including dependencies
	FORMULAE_TO_INSTALL=($(comm -23 <(printf "%s\n" "${FORMULAE[@]}" | sort -u) <(printf "%s\n" "${FORMULAE_INSTALLED[@]}" | sort -u)))
	FORMULAE_TO_REMOVE=($(comm -23 <(printf "%s\n" "${FORMULAE_INSTALLED[@]}" | sort -u) <(printf "%s\n" "${FORMULAE[@]}" | sort -u)))

	CASK_INSTALLED=($(brew list --cask --full-name | col))
	CASK_TO_INSTALL=($(comm -23 <(printf "%s\n" "${CASK[@]}" | sort -u) <(printf "%s\n" "${CASK_INSTALLED[@]}" | sort -u)))
	CASK_TO_REMOVE=($(comm -23 <(printf "%s\n" "${CASK_INSTALLED[@]}" | sort -u) <(printf "%s\n" "${CASK[@]}" | sort -u)))

	function brew_command() {
		echo -e "${FG_LIGHTBLUE}==> Brew $* <==${NC}"
		eval "brew $*"
	}
	echo -e "== REQUESTED =="
	echo -e "${BG_GRAY}${FG_BLACK}formulaes${NC} ${FG_LIGHTGRAY} ${FORMULAE[*]} ${NC}"
	echo -e "${BG_GRAY}${FG_BLACK}casks    ${NC} ${FG_LIGHTGRAY} ${CASK[*]} ${NC}"
	echo -e "== INSTALL MISSING =="
	echo -e "${BG_GRAY}${FG_BLACK}formulaes${NC} ${FG_LIGHTGREEN} ${FORMULAE_TO_INSTALL[*]} ${NC}"
	echo -e "${BG_GRAY}${FG_BLACK}casks    ${NC} ${FG_LIGHTGREEN} ${CASK_TO_INSTALL[*]} ${NC}"
	for f in "${FORMULAE_TO_INSTALL[@]}"; do brew_command "install --formulae $f"; done
	for c in "${CASK_TO_INSTALL[@]}"; do brew_command "install --cask $c"; done

	if [[ -n $1 ]]; then
		echo -e "== REMOVE OTHERS =="
		echo -e "${BG_GRAY}${FG_BLACK}formulaes${NC} ${FG_LIGHTRED} ${FORMULAE_TO_REMOVE[*]} ${NC}"
		echo -e "${BG_GRAY}${FG_BLACK}casks    ${NC} ${FG_LIGHTRED} ${CASK_TO_REMOVE[*]} ${NC}"
		for f in "${FORMULAE_TO_REMOVE[@]}"; do brew_command "remove --formulae $f"; done
		for c in "${CASK_TO_REMOVE[@]}"; do brew_command "remove --cask $c"; done
	fi
}

alias diffs="diff -dbBy --suppress-common-lines --color=always"

#== docker
function docker_run_repo() {
	git_repo="$1"
	docker_image="$2"

	docker run -it --rm \
		-e HOME=/home/usr \
		-e XDG_CONFIG_HOME=/home/usr/.config \
		-v $HOME:/home/usr \
		-v $git_repo:/workspace \
		$docker_image
}

function docker_run_on_git_repo() {
	# pick from local git repos
	local git_repo=$(git-find-all-repos | fzf-display-basenames)
	if [ -n "$git_repo" ]; then
		# pick from all images
		local docker_image=$(docker images --format '{{.Repository}}:{{.Tag}}' | fzf --preview "docker image history --format '{{.CreatedBy}}' {}")
		if [ -n "$docker_image" ]; then
			# start a container of image with git repo mounted as /workspace
			docker_run_repo $git_repo $docker_image
		fi
	fi
}

function docker_build() {
	# select from dockerfiles
	local filepath=$(fd --glob "*.Dockerfile" $DOCKER_FILES | fzf --delimiter / --with-nth -1 --preview='eza -A {} | less')
	# tag as filename without extension
	local filename=$(basename "$filepath")
	local tag="${filename%.*}"
	# if filename given, build it
	[[ -n $filepath ]] && docker build -t $tag -f $filepath $DOCKER_FILES
}

alias dbf="docker_build"
alias dl="docker container ls && docker image ls"
alias dpl="docker pull"
alias dri="docker run -it --rm"
alias dr="docker_run_on_git_repo \$SRC"
alias dr-g="docker_run \$SOURCE_JEFF/exercism exercism-gleam"

if command -v lazydocker &>/dev/null; then
	alias ld="lazydocker"
fi

#== ls replacement: https://github.com/eza-community/eza
alias la="eza -F --group-directories-first --git --all --no-user --no-permissions"
alias ll="eza -lF --group-directories-first --git --no-user --no-permissions"
alias lla="eza -lF --group-directories-first --git --all --no-user --no-permissions"
alias l="clear && lla --header"

function cd-clear-list() {
	# emulate clifm
	/usr/bin/cd $1
	clear
	l
}
alias ccc="cd-clear-list"

alias tree="clear && eza --tree --git --all --ignore-glob=.git"
alias treed="eza --tree --git -D --all --ignore-glob=.git"
alias treea="eza --tree --git --all --follow-symlinks --ignore-glob=.git"
# == fuzzy finder: https://github.com/junegunn/fzf
export FZF_DEFAULT_COMMAND='find . -type f'
export FZF_DEFAULT_OPTS='--info=inline --reverse --border none'
# --preview "bat {}" --preview-window right'

function fzf_query() {
	# passed in query
	if [ -n "$1" ]; then
		fzf --query "$1"
	else
		fzf
	fi
}

function fzf_query_piped() {
	# piped in query
	if [ -n "$1" ]; then
		fzf --query "$1" </dev/stdin
	else
		fzf </dev/stdin
	fi
}

# shows the basename in the selection window, but returns full path
function fzf-display-basenames() {
	# previewing as directory
	fzf --delimiter / --with-nth -1 --preview='eza -A {} | less'
}

# initialize
eval "$(fzf --$SHELL_NAME)"
# map keys
if [[ $SHELL_NAME == "zsh" ]]; then
	# use Ctrl-e instead of Alt-c for "fzf to cd"
	zle -N fzf-cd-widget
	bindkey -M emacs '\C-e' fzf-cd-widget
	bindkey -rM emacs '\ec'
fi
#== git (source control): https://github.com/git/git

# list git repo directories, selection changes to that directory
alias src="cd \$(git-find-all-repos|fzf-display-basenames) && l"

# Personal pretty format
#	Example output:  80adbf1 - Add dotfiles | Windsor, Jeff | 3 hours ago (HEAD -> main, origin/main)
export GIT_LOG_PRETTY_FORMAT='%C(green)%h%C(reset) - %s%C(cyan) | %an%C(dim) | %ch%C(auto)%d%C(reset)'

# Function to find all directories containing a .git subdirectory
git-find-all-repos() {
	# default to my source directory
	local root=${1:-$SOURCE}
	# prune will stop recurse on match, sed removes the '/.git' from the end of the result
	find "$root" -name .git -type d -prune | sed 's|/.git$||'
}

# Function to execute a git command on each Git repository
git-exec-on() {
	local repo
	while IFS= read -r repo; do
		echo "==> $repo"
		git -C "$repo" "$@"
	done
}

function array-to-string() {
	IFS=$'\n' # Use newline as delimiter
	local array_string
	array_string="${@[*]}"
	echo "$array_string"
}

alias gsync="echo -e '\e[94m== Spec Repo Sync ==\e[0m' && array-to-string \$REPOS_TO_SYNC | git-exec-on pull -v" # sync all listed git repos
alias gall="git-find-all-repos"  # list all repos
alias gall_x="clear && git-find-all-repos | git-exec-on" # exec git command on all repos	
alias gb="git blame -w -C -C -C" # git blame (more precise)
alias gbl="git blame -w -C -C -C -L" # git blame line range
alias gd="git diff --word-diff --unified=0" # git diff by words changed, minimal context
alias gl="git log --format=\$GIT_LOG_PRETTY_FORMAT"

alias gs="git status"
alias gss="gall_x status -s"		# shows terse status for all repositories
alias gsss="gall_x status"		# shows verbose status for all repositories
alias gpl="git pull"
alias gpls="gall_x pull"
alias gf="git fetch"
alias gph="git push"
alias gaa="git add --all"


alias ghub="git_clone_source 'github.com' "  # git clone from git hub to my source directory
alias glab="git_clone_source 'gitlab.cj.dev' "  # git clone from git work gitlab to my source directory
function git_clone_source() {
	local base_domain=$1  # 1 = base domain of source
	local repo_url=$2     # 2 = repo url, with or without the protocol and base domain
	
	# remove any un-needed prefixes
	repo=${repo_url#https://$base_domain/}
	repo=${repo#git@$base_domain:}
	repo=${repo%.git}

	clear
	echo -e "\e[94m==> cloning $repo_url into $SOURCE/$base_domain/$repo\e[0m"
	
	# clone repo to my source directory with full folder tree
	git clone "git@$base_domain:$repo.git" "$SOURCE/$base_domain/$repo"

	# change to the repo local directory, clear and ls -la
	cd "$SOURCE/$base_domain/$repo"
	lla
}

#== Lazygit (Git TUI): https://github.com/jesseduffield/lazygit ==
if command -v lazygit &>/dev/null; then
	alias gg="lazygit"
	alias ggg="lazygit --path \$( git-find-all-repos | fzf-display-basenames )"
	# alias lg="lazygit"
fi

#== Helix: https://github.com/helix-editor/helix
alias h="hx"
alias h.="hx ."

#== grep replacement: https://github.com/BurntSushi/ripgrep
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/ripgreprc"
# aliases
alias ar="alias | rg"
# environment
alias er="env | rg"
# functions
alias fr="declare -f | rg"

#== prompt : https://github.com/starship/starship
eval "$(starship init $SHELL_NAME)"


#== stow
# sync all dotfile repos to appropriate home locations
alias dsync="stow -R -d \$DOTFILES -t \$HOME ."

#== yazi: https://github.com/sxyazi/yazi

# open yazi and shell change to the selected directory on exit
function yazi-change-dir() {
	local tmp
	tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd" || return
	fi
	rm -f -- "$tmp"
}

alias y="yazi"
alias yy="yazi-change-dir"



